name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

defaults:
  run:
    shell: bash

env:
  __c_src: args.c dbs26.c
  __build_path: build
  __dest_path: dest
  __src_path: src
  __nproc: nproc
  __cc: clang-21
  __cflags: -std=gnu23 -flto=full -fuse-ld=lld -O3 -Wall -Wextra -Wpedantic -Weverything -DNDEBUG=1 -march=x86-64-v3 -mtune=znver3

jobs:
  build:
    name: ${{ matrix.os }}${{ matrix.os != matrix.on && ' target on ' || '' }}${{ matrix.os != matrix.on && matrix.on || '' }}
    runs-on: ${{ matrix.on == 'macos' && 'macos-15' || 'ubuntu-24.04' }}
    strategy:
      matrix:
        os: [ linux, macos, windows ]
        include:
          - os: linux
            on: linux
          - os: macos
            on: macos
          - os: windows
            on: linux
    env:
      __executable: dbs26${{ matrix.os == 'windows' && '.exe' || '' }}
      __native: ${{ matrix.os == matrix.on }}
    steps:
    - name: Install system updates
      run: |
        ${{ matrix.on == 'linux' && '
        printf "deb http://apt.llvm.org/%s/ %s %s\n" \
               noble llvm-toolchain-noble main \
        | sudo tee /etc/apt/sources.list.d/apt.llvm.org.list
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key \
        | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc' || '' }}
        ${{ matrix.on == 'linux' && matrix.os == 'windows' && '
        sudo mkdir -pm755 /etc/apt/keyrings
        wget -qO- https://dl.winehq.org/wine-builds/winehq.key \
        | sudo gpg --dearmor -o /etc/apt/keyrings/winehq-archive.key -
        wget -qO- https://dl.winehq.org/wine-builds/ubuntu/dists/noble/winehq-noble.sources \
        | sudo tee /etc/apt/sources.list.d/winehq.sources
        cat /etc/apt/sources.list.d/winehq.sources
        sudo dpkg --add-architecture i386' || '' }}
        ${{ matrix.on == 'linux' && 'sudo apt-get update
        sudo apt-get upgrade -y' || '' }}
        ${{ matrix.on == 'macos' && 'set +e
        brew update
        brew upgrade
        brew install bash' || '' }}

    - name: Set env variables
      env:
        __msvc_path_linux: ${{ matrix.os == 'windows' && 'msvc' || '' }}
        __nproc_macos: sysctl -n hw.logicalcpu
        __cc_macos: clang
        __cflags_macos: -std=gnu2x -flto=full -O3 -Wall -Wextra -Wpedantic -Weverything -DNDEBUG=1
      run: |
        def() {
          set "$1" "${1}_${{ matrix.on }}"
          if [[ "${!2}" ]]; then
            declare -g "$1=${!2//$'\n'/ }"
            echo "$1=${!1}" >> "$GITHUB_ENV"
          fi
        }

        def __cc
        def __cflags
        def __nproc
        ${{ matrix.on == 'linux' && matrix.os == 'windows' && 'def __msvc_path
        [[ "$__msvc_sdk_path" ]] || {
          __msvc_sdk_path="$__msvc_path/sdk"
          echo "__msvc_sdk_path=$__msvc_sdk_path" >> "$GITHUB_ENV"
        }
        [[ "$__msvc_dir" ]] || {
          __msvc_dir="$GITHUB_WORKSPACE/$__msvc_path"
          echo "__msvc_dir=$__msvc_dir" >> "$GITHUB_ENV"
        }
        [[ "$__msvc_sdk_dir" ]] || {
          __msvc_sdk_dir="$__msvc_dir/sdk"
          echo "__msvc_sdk_dir=$__msvc_sdk_dir" >> "$GITHUB_ENV"
        }' || '' }}
        [[ "$__build_dir" ]] || {
          __build_dir="$GITHUB_WORKSPACE/$__build_path"
          echo "__build_dir=$__build_dir" >> "$GITHUB_ENV"
        }
        echo "__exe=$__build_dir/$__executable" >> "$GITHUB_ENV"

    - uses: actions/checkout@v4

    - name: Clone msvc-wine
      if: ${{ matrix.os == 'windows' && matrix.on == 'linux' }}
      uses: actions/checkout@v4
      with:
        repository: mstorsjo/msvc-wine
        path: ${{ env.__msvc_dir }}
        ref: master

    - name: Install build dependencies
      run: |
        ${{ matrix.on == 'linux' && '
        sudo apt-get install -y clang clang-21 lld \
                     lld-21 llvm-21-linker-tools' || '' }}
        ${{ matrix.on == 'linux' && matrix.os == 'windows' && '
        sudo apt-get install -y --install-recommends ca-certificates \
                     msitools python3 winbind winehq-staging' || '' }}
        ${{ matrix.on == 'macos' && 'set +e
        brew install coreutils gnu-sed
        printf -vP "$(brew --prefix)/opt/%s/libexec/gnubin:" \
               gnu-sed coreutils
        P="${P}$PATH"
        echo "export PATH=\"$P\"" >> "$HOME/.bash_profile"
        echo "PATH=$P" >> "$GITHUB_ENV"' || '' }}
        ${{ matrix.on == 'linux' && matrix.os == 'windows' && 'mkdir -p "$__msvc_sdk_dir"
        "$__msvc_dir/vsdownload.py" --accept-license --dest "$__msvc_sdk_dir"
        "$__msvc_dir/install.sh" "$__msvc_sdk_dir"' || '' }}

    - name: Get available compilers
      run: |
        set +e
        uname -a
        printf -- '\n+---------+\n|compilers|\n+---------+\n'
        . .github/workflows/functions.bash
        get_compilers
        declare -a cc_clang cc_gcc
        declare -A cc_v
        for _cc in "${compilers[@]}"; do
          v=$("$_cc" --version 2>&1 | head -1)
          case "$_cc" in
          clang*)
            cc_clang+=("$_cc") ;;
          gcc*)
            [[ ! "$v" =~ clang ]] || continue
            cc_gcc+=("$_cc") ;;
          esac
          cc_v["$_cc"]="$v"
        done
        n=$(printf '%s\n' "${cc_v[@]}" | wc -L)
        for _cc in "${cc_clang[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_clang
        for _cc in "${cc_gcc[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_gcc

    - name: Compile
      working-directory: ${{ github.workspace }}/${{ env.__src_path }}
      run: |
        mkdir -p "$__build_dir"
        ${{ matrix.os == 'linux' && '"$__cc" $__cflags -o "$__exe" $__c_src
        strip --strip-all "$__exe"' || '' }}
        ${{ matrix.os == 'windows' && matrix.on == 'linux' && '
        BIN="$__msvc_sdk_dir/bin/x64" . "$__msvc_dir/msvcenv-native.sh"
        "$__cc" --target=x86_64-windows-msvc $__cflags -o "$__exe" $__c_src' || '' }}
        ${{ matrix.os == 'macos' && '"$__cc" -arch arm64 $__cflags -o "$__exe-arm64" $__c_src
        "$__cc" -arch x86_64 $__cflags -o "$__exe-x86_64" $__c_src
        lipo -create -output "$__exe" "$__exe-arm64" "$__exe-x86_64"' || '' }}

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dbs26-${{ matrix.os }}
        path: |
          ${{ env.__executable }}
          LICENSE
          README.md

    - name: Verify binary output
      run: |
        try() {
          local f="$RUNNER_TEMP/test.bin"
          "$@" "$__exe" -o -   | sha1sum     ; rm -f "$f"
          "$@" "$__exe" -o "$f"; sha1sum "$f"; rm -f "$f"
        }
        ${{ matrix.os == 'windows' && matrix.on == 'linux' && 'WINEDEBUG=-all try wine64' || 'try' }}${{ matrix.os == 'macos' && ' arch -arm64
        try arch -x86_64' || '' }}
