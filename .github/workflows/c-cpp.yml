name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-ubuntu-24_04:
    runs-on: ubuntu-24.04
    steps:
    - name: Add apt.llvm.org
      run: |
        printf -- 'deb http://apt.llvm.org/noble/ llvm-toolchain-noble%s main\n' '' '-20' | sudo tee /etc/apt/sources.list.d/apt.llvm.org.list
        wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc

    - name: Upgrade packages
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y

    - name: Install dependencies
      run: |
        sudo apt-get install -y python3 msitools ca-certificates

    - name: Upgrade Clang
      run: |
        sudo apt-get install clang lld llvm-20-linker-tools clang-20 lld-20 || true

    - uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        __common_c_flags=( \
          -std=gnu23       \
          -O3              \
          -flto=full       \
          -march=x86-64-v3 \
          -mtune=x86-64-v3 \
          -Wall            \
          -Wextra          \
          -Wpedantic       \
          -Weverything     \
          -DNDEBUG=1       \
        )
        echo "__cflags=${__cflags[@]}" >> "$GITHUB_ENV"
        echo "__src_dir=$(realpath -e src)" >> "$GITHUB_ENV"
        echo "ncpu=$((n = $(nproc)+0, n > 0 ? n : 1))" >> "$GITHUB_ENV"

    - name: Get available compilers
      run: |
        set +e
        uname -a
        printf -- '\n+---------+\n|compilers|\n+---------+\n'
        . scripts/lib.sh
        get_compilers
        declare -a cc_clang cc_gcc
        declare -A cc_v
        for _cc in "${compilers[@]}"; do
          v=$("$_cc" --version 2>&1 | head -1)
          case "$_cc" in
          clang*)
            cc_clang+=("$_cc") ;;
          gcc*)
            [[ ! "$v" =~ clang ]] || continue
            cc_gcc+=("$_cc") ;;
          esac
          cc_v["$_cc"]="$v"
        done
        n=$(printf '%s\n' "${cc_v[@]}" | wc -L)
        for _cc in "${cc_clang[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_clang
        for _cc in "${cc_gcc[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_gcc

    - name: Compile for Linux
      shell: bash
      run: |
        mkdir -p build
        clang-20 -working-directory "$__src_dir" $__cflags \
                 dbs26.c -o ../build/dbs26

    - name: Archive Linux binary
      uses: actions/upload-artifact@v4
      with:
        name: dbs26-linux
        path: build/dbs26

    - name: Clone msvc-wine
      uses: actions/checkout@v4
      with:
        repository: mstorsjo/msvc-wine
        path: msvc
        ref: master

    - name: Install Windows SDK
      shell: bash
      run: |
        mkdir -p msvc/sdk
        sdk=$(realpath -e msvc/sdk)
        pushd msvc
        ./vsdownload.py --accept-license --dest "$sdk"
        ./install.sh "$sdk"
        popd

    - name: Compile for Windows
      shell: bash
      run: |
        mkdir -p build
        sdk=$(realpath -e msvc/sdk)
        BIN="$sdk/bin/x64" . msvc/msvcenv-native.sh
        F=(-working-directory "$(realpath -e src)" -std=gnu23 -O3
           -flto=full -Wall -Wextra -Wpedantic -Weverything -DNDEBUG=1)
        clang-20 "${F[@]}" dbs26.c -o ../build/dbs26.exe \
                 --target=x86_64-windows-msvc -fuse-ld=lld \
                 -march=x86-64-v3 -mtune=x86-64-v3

    - name: Archive Windows binary
      uses: actions/upload-artifact@v4
      with:
        name: dbs26-windows
        path: build/windows/dbs26.exe

  build-macos-15:
    runs-on: macos-15
    steps:
    - name: Install updates
      run: |
        set +e
        echo "bash $BASH_VERSION"
        brew update
        brew upgrade
        brew install bash

    - name: Install dependencies
      run: |
        set +e
        echo "bash $BASH_VERSION"
        brew install binutils coreutils gnu-sed make
        if [[ -z "$HOMEBREW_PREFIX" ]]; then
          export HOMEBREW_PREFIX="$(brew --prefix)"
          echo 'export HOMEBREW_PREFIX="$(brew --prefix)"' >> "$HOME/.bash_profile"
          echo "HOMEBREW_PREFIX=$HOMEBREW_PREFIX" >> "$GITHUB_ENV"
        fi
        export PATH="$(brew --prefix binutils)/bin:$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$HOMEBREW_PREFIX/opt/gnu-sed/libexec/gnubin:$HOMEBREW_PREFIX/opt/make/libexec/gnubin:$PATH"
        printf '%s\n' "alias nproc='sysctl -n hw.logicalcpu'" \
               "export PATH=\"$PATH\"" >> "$HOME/.bash_profile"
        printf '%s\n' "PATH=$PATH" \
               "ncpu=$(sysctl -n hw.logicalcpu)" >> "$GITHUB_ENV"

    - uses: actions/checkout@v4

    - name: Get available compilers
      shell: bash
      run: |
        set +e
        uname -a
        printf -- '\n+---------+\n|compilers|\n+---------+\n'
        . scripts/lib.sh
        get_compilers
        declare -a cc_clang cc_gcc
        declare -A cc_v
        for _cc in "${compilers[@]}"; do
          v=$("$_cc" --version 2>&1 | head -1)
          case "$_cc" in
          clang*)
            cc_clang+=("$_cc") ;;
          gcc*)
            [[ ! "$v" =~ clang ]] || continue
            cc_gcc+=("$_cc") ;;
          esac
          cc_v["$_cc"]="$v"
        done
        n=$(printf '%s\n' "${cc_v[@]}" | wc -L)
        for _cc in "${cc_clang[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_clang
        for _cc in "${cc_gcc[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_gcc

    - name: Compile
      shell: bash
      run: |
        mkdir -p build
        F=(-working-directory "$(realpath -e src)" -std=gnu2x -O3
           -flto=full -Wall -Wextra -Wpedantic -Weverything -DNDEBUG=1)
        clang "${F[@]}" dbs26.c -o ../build/dbs26-arm64 -arch arm64
        clang "${F[@]}" dbs26.c -o ../build/dbs26-x86_64 -arch x86_64 \
              -march=skylake -mtune=skylake
        lipo -create -output build/dbs26 build/dbs26-arm64 build/dbs26-x86_64

    - name: Archive macOS binary
      uses: actions/upload-artifact@v4
      with:
        name: dbs26-macos
        path: build/dbs26

    - name: Verify program output
      shell: bash
      run: build/dbs26 -o- | sha1sum
