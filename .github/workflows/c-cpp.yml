name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: ${{ matrix.os }} target on ${{ matrix.on }}
    runs-on: ${{ matrix.on }}
    strategy:
      fail-fast: false
      matrix:
        os: [ Linux, macOS, Windows ]
        on: [ ubuntu-24.04, macos-15, macos-14 ]
        exclude:
          - os: Linux
            on: macos-15
          - os: Linux
            on: macos-14
          - os: macOS
            on: ubuntu-24.04
    steps:
    - name: id
      id: id
      env:
        os_: ${{ matrix.os }}_
        _for_: ${{ matrix.os != runner.os && '_for_' || '' }}${{ matrix.os != runner.os && matrix.os || '' }}
        on_: ${{ matrix.os != runner.os && 'on_' || '' }}${{ matrix.os != runner.os && runner.os || '' }}
        _on_: ${{ matrix.os != runner.os && '=on_' || '' }}${{ matrix.os != runner.os && runner.os || '' }}
        type: ${{ matrix.os == runner.os && 'native' || 'cross' }}
      run: |
        printf '%s\n' \
               "on_${{ runner.os }}=on_${{ runner.os }}" \
               "for_${{ matrix.os }}=for_${{ matrix.os }}" \
               ${{ env.on_ }}${{ env._for_ }}${{ env._on_ }}${{ env._for_ }} \
               "build=${{ matrix.os != runner.os && env.os_ || '' }}${{ matrix.on }}" \
               "${{ matrix.os }}_${{ runner.os }}=${{ env.type }}_${{ matrix.os }}" \
               "${{ env.type }}_${{ matrix.os }}=${{ env.type }}_${{ matrix.os }}" \
               "${{ env.type }}=${{ env.type }}" >> "$GITHUB_OUTPUT"

    - uses: actions/checkout@v4

    - name: Clone msvc-wine
      if: ${{ steps.id.outputs.cross_Windows }}
      uses: actions/checkout@v4
      with:
        repository: imaami/msvc-wine
        path: ${{ github.workspace }}/msvc-wine
        ref: msvc-17.13-10.0.26100-14.43.17.13

    - name: Configure build
      id: cfg
      env:
        build_type: ${{ steps.id.outputs.cross }}${{ steps.id.outputs.native }}
        cc: ${{ steps.id.outputs.on_macOS && 'clang' || 'clang-21' }}
        cl: ${{ steps.id.outputs.for_Windows && 'cl' || '' }}
        ccl: ${{ steps.id.outputs.on_Linux_for_Windows && 'clang-cl-21' || '' }}
        baseflags: -std=gnu2${{ steps.id.outputs.on_macOS && 'x' || '3' }} -flto=full -O3 -Wall -Wextra -Wpedantic -Weverything -DNDEBUG=1
        archflags: ${{ ! steps.id.outputs.for_macOS && ' -fuse-ld=lld' || '' }}${{ steps.id.outputs.for_Linux && ' -march=x86-64-v3 -mtune=znver3' || '' }}
        ext: ${{ steps.id.outputs.for_Windows && '.exe' || '' }}
      run: |
        exe="dbs26-${{ env.cc }}${{ env.ext }}"
        ${{ env.cl && 'exe_cl=dbs26-' || '' }}${{ env.cl }}${{ env.cl && env.ext || '' }}
        ${{ env.ccl && 'exe_ccl=dbs26-' || '' }}${{ env.ccl }}${{ env.ccl && env.ext || '' }}
        printf '%s\n' \
               ${{ steps.id.outputs.cross_Windows && 'maybe_use_wine="set \$(command -v wine64 || command -v wine || command -v wine-stable || echo false) \"\$@\""' || '' }} \
               cc=${{ env.cc }} \
               ${{ env.cl && 'cl=' || '' }}${{ env.cl }} \
               ${{ env.ccl && 'ccl=' || '' }}${{ env.ccl }} \
               cflags="${{ env.baseflags }}${{ env.archflags }}" \
               exe="$exe" \
               ${{ env.cl && 'exe_cl=$exe_cl' || '' }} \
               ${{ env.ccl && 'exe_ccl=$exe_ccl' || '' }} \
               pkg=dbs26-${{ steps.id.outputs.build }} \
               src="args.c dbs26.c" >> "$GITHUB_OUTPUT"

        ${{ steps.id.outputs.cross_Windows && '
        echo "WINEDEBUG=-all" >> "$GITHUB_ENV"
        msvc_sdk="msvc"
        printf "%s\n"                       \
               cache="cache"                \
               msvc_bin="$msvc_sdk/bin/x64" \
               msvc_git="msvc-wine"         \
               msvc_sdk="$msvc_sdk" >> "$GITHUB_OUTPUT"
        ' || '' }}

        build_dir="$GITHUB_WORKSPACE/build"
        printf "%s\n" \
               abs_exe="$build_dir/$exe" \
               ${{ env.cl && 'abs_exe_cl="$build_dir/$exe_cl"' || ''}} \
               ${{ env.ccl && 'abs_exe_ccl="$build_dir/$exe_ccl"' || ''}} \
               build_dir="$build_dir" \
               build_type="${{ env.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Plan build
      id: f
      env:
        update_on_Linux: |
          echo "deb http://apt.llvm.org/noble/ llvm-toolchain-noble main" | \
          sudo tee /etc/apt/sources.list.d/apt.llvm.org.list > /dev/null
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | \
          sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc > /dev/null
          sudo apt-get update -y
          sudo apt-get purge -y firefox snapd

        update_on_macOS: |
          brew update
          brew install bash

        cache_cross_Windows: |
          local msvc_cache="$cache/msvc"
          local MSVC_CACHE="$GITHUB_WORKSPACE/$msvc_cache"
          local MSVC_GIT="$GITHUB_WORKSPACE/$msvc_git"
          local MSVC_SDK="$GITHUB_WORKSPACE/$msvc_sdk"
          mkdir -p "$MSVC_CACHE"
          "$MSVC_GIT/vsdownload.py" --accept-license --architecture=x64 --host-arch=x64 --only-host=yes --preview --print-hashes --save-manifest > SHA256SUMS
          local manifest=$(ls -1tr | grep '\.manifest$' | tail -1) || true
          local version=$(jq -r '.info.productSemanticVersion' "$manifest")
          local hash=$(${{ steps.id.outputs.on_macOS && 'shasum' || 'sha1sum' }} SHA256SUMS)
          local k="msvc-$version" r
          echo "key=$k-${hash::40}" >> "$GITHUB_OUTPUT"
          {
            echo 'keys<<EOF'
            while [[ "$k" != "$r" ]]; do
              echo "$k"; r="$k"
              k="${k%?${k##*[0-9][.+-]}}"
            done
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          echo "manifest=$manifest" >> "$GITHUB_OUTPUT"
          echo "path=$msvc_cache" >> "$GITHUB_OUTPUT"

        pre_depends_on_Linux_for_Windows: |
          sudo apt-get install -y msitools winbind wine wine64
        pre_depends_on_macOS_for_Windows: |
          brew install msitools wine-stable

        depends_cross_Windows: |
          local MSVC_CACHE="$GITHUB_WORKSPACE/$msvc_cache"
          local MSVC_GIT="$GITHUB_WORKSPACE/$msvc_git"
          local MSVC_SDK="$GITHUB_WORKSPACE/$msvc_sdk"
          local OLD_CACHE=''
          if [[ "$cache_miss" ]]; then
            printf '\033[1;33mRe-caching MSVC SDK\033[m\n'
            if [[ -d "$MSVC_CACHE" ]]; then
              OLD_CACHE="$MSVC_CACHE.old"
              mv "$MSVC_CACHE" "$OLD_CACHE"
            fi
          fi
          printf '\033[1;32mInstalling MSVC SDK\033[m\n'
          mkdir -p "$MSVC_CACHE" "$MSVC_SDK"
          "$MSVC_GIT/vsdownload.py" --accept-license --architecture=x64 --host-arch=x64 --only-host=yes --preview --manifest="$manifest" --cache="$MSVC_CACHE"${OLD_CACHE:+ --migrate="$OLD_CACHE"} --dest="$MSVC_SDK"
          if [[ "$OLD_CACHE" && -d "$OLD_CACHE" ]]; then
            rm -rf "$OLD_CACHE"
          fi
          unset OLD_CACHE
          "$MSVC_GIT/install.sh" "$MSVC_SDK"

        post_depends_on_Linux: |
          sudo apt-get install -y clang clang-21 lld lld-21 llvm-21-linker-tools

        post_depends_on_macOS: |
          brew install coreutils gnu-sed
          echo "$(brew --prefix)/opt/coreutils/libexec/gnubin:$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> "$GITHUB_PATH"
        post_depends_on_macOS_for_Windows: |
          brew install llvm lld binutils
          echo "$(brew --prefix)/opt/llvm/bin:$(brew --prefix)/opt/binutils/bin" >> "$GITHUB_PATH"

        pre_compile: |
          mkdir -p "${{ steps.cfg.outputs.build_dir }}"
        compile_native_Linux: |
          "${{ steps.cfg.outputs.cc }}" ${{ steps.cfg.outputs.cflags }} -o "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}" ${{ steps.cfg.outputs.src }}
          strip --strip-all "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}"
        compile_native_macOS: |
          "${{ steps.cfg.outputs.cc }}" -arch arm64 ${{ steps.cfg.outputs.cflags }} -o "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}-arm64" ${{ steps.cfg.outputs.src }}
          "${{ steps.cfg.outputs.cc }}" -arch x86_64 ${{ steps.cfg.outputs.cflags }} -o "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}-x86_64" ${{ steps.cfg.outputs.src }}
          lipo -create -output "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}" "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}-arm64" "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}-x86_64"
        compile_cross_Windows: |
          local MSVC_BIN="$GITHUB_WORKSPACE/$msvc_bin"
          local MSVC_GIT="$GITHUB_WORKSPACE/$msvc_git"
          BIN="$MSVC_BIN" . "$MSVC_GIT/msvcenv-native.sh"
          export PATH="$MSVC_BIN:$PATH"
          "${{ steps.cfg.outputs.cc }}" --target=$TARGET_TRIPLE ${{ steps.cfg.outputs.cflags }} -o "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe }}" ${{ steps.cfg.outputs.src }}
          "${{ steps.cfg.outputs.cl }}" /nologo /TC /std:clatest /experimental:c11atomics /DNDEBUG=1 /Wall /O2 /Oi /GL /GF /Zo- /MT /Fe: "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe_cl }}" ${{ steps.cfg.outputs.src }}
        post_compile_on_Linux_for_Windows: |
          "${{ steps.cfg.outputs.ccl }}" -nologo /TC /DNDEBUG=1 /Wall /O2 /Oi /GF /Zo- /MT /Fe: "${{ steps.cfg.outputs.build_dir }}/${{ steps.cfg.outputs.exe_ccl }}" -fuse-ld=lld ${{ steps.cfg.outputs.src }}

        pre_validate: |
          try() {
            ${{ steps.cfg.outputs.maybe_use_wine }}
            "$@" -o -     | sha1sum       ; rm -f "$out"
            "$@" -o "$out"; sha1sum "$out"; rm -f "$out"
          }
        validate_native_Linux: |
          try ./${{ steps.cfg.outputs.exe }}
        validate_native_macOS: |
          try arch -arm64 ./${{ steps.cfg.outputs.exe }}
          try arch -x86_64 ./${{ steps.cfg.outputs.exe }}
        validate_cross_Windows: |
          try ./${{ steps.cfg.outputs.exe }}
          try ./${{ steps.cfg.outputs.exe_cl }}
        post_validate_on_Linux_for_Windows: |
          try ./${{ steps.cfg.outputs.exe_ccl }}

        type: ${{ steps.cfg.outputs.build_type }}
        on_for: |
          f="${x}_on_${{ runner.os }}_for_${{ matrix.os }}"
          y="${!f}"
          [[ -z "${y// /}" ]] || {
            printf -vfn -- '%s\n%s' "$fn" "$y"
            continue
          }
      run: |
        plan() {
          local fn='' x f y
          for x in pre_$1 $1 post_$1; do
            f="${x}_on_${{ runner.os }}"
            y="${!f}"
            [[ -z "${y// /}" ]] || {
              printf -vfn -- '%s\n%s' "$fn" "$y"
            }
            ${{ steps.id.outputs.cross && env.on_for || '' }}
            f="${x}_${{ env.type }}_${{ matrix.os }}"
            y="${!f}"
            [[ -z "${y// /}" ]] || {
              printf -vfn -- '%s\n%s' "$fn" "$y"
              continue
            }
            f="${x}_${{ env.type }}"
            y="${!f}"
            [[ -z "${y// /}" ]] || {
              printf -vfn -- '%s\n%s' "$fn" "$y"
              continue
            }
            y="${!x}"
            [[ -z "${y// /}" ]] || {
              printf -vfn -- '%s\n%s' "$fn" "$y"
            }
          done
          x=($fn)
          y=${x[*]}
          [[ "${y// /}" ]] || return 0
          printf -vfn -- 'do_%s() {%s\n}\n' "$1" "$fn"
          unset -f "do_$1"
          eval "$fn"
          printf -vfn -- '%s\n' "$(declare -f "do_$1")"
          unset -f "do_$1"
          printf '%s' "$fn" | sed -E $'s/^/\| \033['"$2"$'m/;s/$/\033[m/'
          printf -vfn -- '%s%s\n' "$fn" "do_$1"
          printf '%s<<EOF\n%s\nEOF\n' "$1" "$fn" >> "$GITHUB_OUTPUT"
        }

        plan update   '1;35'
        plan cache    '1;36'
        plan depends  '1;34'
        plan compile  '1;33'
        plan validate '1;32'

    - name: Update system
      run: |
        ${{ steps.f.outputs.update }}

    - name: Prepare cache
      id: cache
      env:
        cache: ${{ steps.cfg.outputs.cache }}
        msvc_git: ${{ steps.cfg.outputs.msvc_git }}
        msvc_sdk: ${{ steps.cfg.outputs.msvc_sdk }}
      run: |
        ${{ steps.f.outputs.cache }}

    - name: Cache MSVC SDK
      if: ${{ steps.id.outputs.cross_Windows }}
      id: cache-msvc
      uses: actions/cache@v4
      with:
        path: ${{ steps.cache.outputs.path }}
        key: ${{ steps.cache.outputs.key }}
        restore-keys: |
          ${{ steps.cache.outputs.keys }}

    - name: Install dependencies
      env:
        cache_miss: ${{ steps.cache-msvc.outputs.cache-hit != 'true' && '1' || '' }}
        manifest: ${{ steps.cache.outputs.manifest }}
        msvc_cache: ${{ steps.cache.outputs.path }}
        msvc_git: ${{ steps.cfg.outputs.msvc_git }}
        msvc_sdk: ${{ steps.cfg.outputs.msvc_sdk }}
      run: |
        ${{ steps.f.outputs.depends }}

    - name: Introspect compilers
      run: |
        set +e
        uname -a
        printf -- '\n+---------+\n|compilers|\n+---------+\n'
        . .github/workflows/functions.bash
        get_compilers
        declare -a cc_clang cc_gcc
        declare -A cc_v
        for _cc in "${compilers[@]}"; do
          v=$("$_cc" --version 2>&1 | head -1)
          case "$_cc" in
          clang*)
            cc_clang+=("$_cc") ;;
          gcc*)
            [[ ! "$v" =~ clang ]] || continue
            cc_gcc+=("$_cc") ;;
          esac
          cc_v["$_cc"]="$v"
        done
        n=$(printf '%s\n' "${cc_v[@]}" | wc -L)
        for _cc in "${cc_clang[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_clang
        for _cc in "${cc_gcc[@]}"; do
          printf "%-${n}s\t%s\n" "${cc_v[$_cc]}" "$_cc"
        done | tee compilers_gcc

    - name: Compile
      working-directory: ${{ github.workspace }}/src
      env:
        msvc_bin: ${{ steps.cfg.outputs.msvc_bin }}
        msvc_git: ${{ steps.cfg.outputs.msvc_git }}
      run: |
        ${{ steps.f.outputs.compile }}

    - name: Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.cfg.outputs.pkg }}
        path: |
          ${{ steps.cfg.outputs.abs_exe }}
          ${{ steps.cfg.outputs.abs_exe_cl }}
          ${{ steps.cfg.outputs.abs_exe_ccl }}

    - name: Validate
      working-directory: ${{ steps.cfg.outputs.build_dir }}
      env:
        out: ${{ runner.temp }}/test.bin
      run: |
        ${{ steps.f.outputs.validate }}
